// Create a Report schema
const reportSchema = new mongoose.Schema({
  patientId: { type: mongoose.Schema.Types.ObjectId, ref: 'Patient' },
  type: String,
  content: String
});

// Create a Report model
const Report = mongoose.model('Report', reportSchema);

// API endpoint for generating reports
app.post('/api/reports', (req, res) => {
  const { patientId, type, content } = req.body;

  // Create a new report
  const newReport = new Report({
    patientId,
    type,
    content
  });

  newReport.save((error, createdReport) => {
    if (error) {
      console.error('Error creating report:', error);
      res.status(500).json({ error: 'Internal server error' });
    } else {
      res.status(201).json(createdReport);
    }
  });
});

// API endpoint for fetching reports by patient
app.get('/api/reports/:patientId', (req, res) => {
  const patientId = req.params.patientId;

  // Find reports by patient ID
  Report.find({ patientId })
    .populate('patientId', 'name')
    .exec((error, reports) => {
      if (error) {
        console.error('Error fetching reports:', error);
        res.status(500).json({ error: 'Internal server error' });
      } else {
        res.json(reports);
      }
    });
});
