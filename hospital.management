const express = require('express');
const mongoose = require('mongoose');

// Connect to MongoDB
mongoose.connect('mongodb://localhost/hospitalDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB'))
.catch(error => console.error('Error connecting to MongoDB:', error));

// Create a Hospital schema
const hospitalSchema = new mongoose.Schema({
  name: String,
  address: String,
  phone: String
});

// Create a Hospital model
const Hospital = mongoose.model('Hospital', hospitalSchema);

// Create Express app
const app = express();

// Middleware for parsing JSON data
app.use(express.json());

// API endpoints for hospital management
app.get('/api/hospitals', (req, res) => {
  // Fetch all hospitals from the database
  Hospital.find({}, (error, hospitals) => {
    if (error) {
      console.error('Error fetching hospitals:', error);
      res.status(500).json({ error: 'Internal server error' });
    } else {
      res.json(hospitals);
    }
  });
});

app.post('/api/hospitals', (req, res) => {
  // Create a new hospital
  const newHospital = req.body;

  Hospital.create(newHospital, (error, createdHospital) => {
    if (error) {
      console.error('Error creating hospital:', error);
      res.status(500).json({ error: 'Internal server error' });
    } else {
      res.status(201).json(createdHospital);
    }
  });
});

app.put('/api/hospitals/:id', (req, res) => {
  const hospitalId = req.params.id;
  const updatedHospital = req.body;

  Hospital.findByIdAndUpdate(hospitalId, updatedHospital, { new: true }, (error, updatedDoc) => {
    if (error) {
      console.error('Error updating hospital:', error);
      res.status(500).json({ error: 'Internal server error' });
    } else {
      res.json(updatedDoc);
    }
  });
});

app.delete('/api/hospitals/:id', (req, res) => {
  const hospitalId = req.params.id;

  Hospital.findByIdAndRemove(hospitalId, (error, removedDoc) => {
    if (error) {
      console.error('Error deleting hospital:', error);
      res.status(500).json({ error: 'Internal server error' });
    } else {
      res.json(removedDoc);
    }
  });
});

// Start the server
const port = 3000;
app.listen(port, () => {
  console.log(`Server started on port ${port}`);
});
